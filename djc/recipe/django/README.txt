Basic options
=============

The recipe supports the following options:

project
    This identifies a python module (in dotted notation) that can serve as
    project package. The bare minimum for a project package is to contain a
    ``urls.py`` file and a ``templates`` directory. It is mandatory unless both
    the ``urlconf`` and ``templates`` option are defined.

urlconf
    Identifies the module that contains the url definition: if omitted the file
    ``urls.py`` inside the module given as ``project`` is used.

templates
    Identifies the templates directory. If omitted, the directory named
    ``templates`` located in the module given as ``project`` is used.

media-directory
    Identifies the folder into which static content (images, CSS and
    Javascripts) will go. Relatives path are considered relative to the
    buildout directory. The directory will be created if not present, and
    nothing will be done if it already exists. If omitted, defaults to
    ``static``.

settings-template
    If specified, the given template is used to generate the ``settings.py``
    file, if not provided, the default template will be used. See Templating_
    for more details.

media-origin
    If specified, defines a directory from which to copy the static files that
    have to go in ``media-directory``: the files will be copied over only if
    ``media-directory`` does not exists. The origin takes the form of
    ``my.module: directory`` where *my.module* is a python module and
    *directory* a directory inside it.


Advanced options
================

.. note:: All these options are optional and should not be necessary under
          normal conditions, but might be useful to advanced users.

The following advanced options are supported:

extra-paths
    A number of non-standard paths where additional python modules are located.

pth-files
    A number of pth-files from which to load additional python modulesthat
    should be present in the buildout.


Example usage
=============

As first thing, we need to have a Django project egg around. We have made a
very simple one just for testing and we have created a source distribution for
it located in ``packages``.

This is of course not the only way you can distribute and obtain the project
egg: for example, during developement, it is recommended to use `mr.developer`_
for that.

That cleared, we create the most simple buildout conceivable using this recipe ::

    >>> write('buildout.cfg',
    ... """
    ... [buildout]
    ... parts = djangotest
    ... find-links = packages
    ...
    ... [djangotest]
    ... recipe = djc.recipe.django
    ... project = dummydjangoprj
    ... """)

And run it ::

    >>> print 'start', system(buildout) 
    start...
    Installing djangotest.
    <BLANKLINE>


Templating
==========

The settings.py file is generated by interpolating the options of the buildout
section with a template, be it the default one or the one provided by the
``settings-template`` option.

The template must be a valid tempita_ template, to which the whole options of
the current buildout section is passed as namespace, integrated as follow:

1. In the options name, all minuses (``-``) are converted to underscores
   (``_``)

2. The option ``name`` and ``secret`` are added, respectively mapping to the
   buildout section name and to a randomly-generated secret [#]_.

3. A serie of functions is added to the namespace to simplify the handling of
   some situations, see below for more details.

Functions
---------

absolute_url
    Takes a path and, if it is relative, concatenates it with the buildout
    location to make it absolute.

listify
    Takes a chunk of data, splits it into lines, trims those lines and returns
    the obtained list, from which void strings are purged.


.. _tempita: http://pythonpaste.org/tempita/

.. _`mr.developer`: http://pypi.python.org/pypi/mr.developer

.. [#] In all truth, it tries to read it from ``.secret.txt``: that failing the
       secret code is generated and written to said file to be used
       subsequently.


